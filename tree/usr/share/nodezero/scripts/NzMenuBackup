#!/bin/bash
#Backup menu and functions
source /etc/nodezero/nodezero.conf
set -e

###############################################################################
_NzCreateBackupDir() { #Create backup destination if it does not exist
    if [ ! -d "${BACKUP_LOCAL_STORAGE}" ]
    then mkdir -p "${BACKUP_LOCAL_STORAGE}"
    fi
}


_NzRunTree() { #Create a list of files in user-specified directories ($IMPORTANT_DIRS)
    FILELIST="${BACKUP_LOCAL_STORAGE}/filelist-`date +%Y%m%d-%H\:%M\:%S`.txt"

    echo "Writing file list to $FILELIST..."
    tree -alxhtC --dirsfirst  ${IMPORTANT_DIRS} >> ${FILELIST}

    if [ ${TREE_TO_HTML} = "1" ] #HTML output (disabled by default, set TREE_TO_HTML to 1 in nodezero.conf)
    then
        HTML_FILELIST="${BACKUP_LOCAL_STORAGE}/filelist-`date +%Y%m%d-%H\:%M\:%S`.html"
        echo "Writing HTML file list to $HTML_FILELIST..."
        tree -alxhtC -H ./ --dirsfirst  ${IMPORTANT_DIR} >> ${HTML_FILELIST}
    fi
}



_NzBackupNow() { #Main backup routine #TODO TODO TODO
    #TODO: check obnam configuration file
    #Example: obnam backup --repository sftp://me@server.org/~/backups --quiet --keep 90d --compress-with gzip --log syslog --exclude '/home/somedir' /
    #obnam backup ${IMPORTANT_DIRS} &&
    #date +%c >| "$BACKUP_LOCAL_STORAGE/last_backup.txt"
    #TODO: backups can take a long time so maybe this job should be muted/disowned?

    #New backup routin using backintime

    #Create dirs
    mkdir -p "$BACKUP_LOCAL_STORAGE/backintime/nodezero/root/1"

    #example cron:        0 */2 * * * nice -n 19 ionice -c2 -n7 /usr/bin/backintime --backup-job >/dev/null 2>&1

    #Main backup
    backintime --profile nodezero --config "$NZ_PATH/backintime.conf" --backup

}

_NzBackupSqldb() { #Backup an SQL database
    mysql_backup_date=$(date +%Y%m%d-%H\:%M\:%S)
    mysqldump -u root --all-databases > ${BACKUP_LOCAL_STORAGE}/mysqldump-"$mysql_backup_date".sql
    echo $mysql_backup_date >| "$BACKUP_LOCAL_STORAGE/last_db_backup.txt"
}

_NzRestoreSqldb() { #Restore an sql database #TODO
echo "NOT YET IMPLEMENTED"
#From: http://stackoverflow.com/questions/1013852/:
#RESTORE A DB TABLE FROM A FULL DUMP: sed -n -e '/CREATE TABLE.*mytable/,/CREATE TABLE/p' mysql.dump > mytable.dump
}


_NzShowLastRemoteDbBackup() { #Display last remote databases backup date
    if [ -r $BACKUP_MOUNTPOINT_NAME/last_db_backup.txt ]
    then
        LAST_REMOTE_DB_BACKUP=$(cat "$BACKUP_MOUNTPOINT_NAME/last_db_backup.txt")
        echo "Last remote MySQL database backup: $LAST_REMOTE_DB_BACKUP"
    else
        echo "No remote MySQL database backups detected."
    fi
}


_NzShowLastLocalDbBackup() { #Display last local mysql databases backup date
    if [ -r $BACKUP_LOCAL_STORAGE/last_db_backup.txt ]
    then
        LAST_LOCAL_DB_BACKUP=$(cat "$BACKUP_LOCAL_STORAGE/last_db_backup.txt")
        echo "Last local MySql databases backup: $LAST_LOCAL_DB_BACKUP"
    else
        echo "No local MySql database backups detected."
    fi
}


_NzShowLastRemoteBackup() { #Display last remote backup date
    if [ -z "${BACKUP_MOUNTPOINT_NAME:-}" ]
        then echo "No external backup disk detected"
    elif [ -r $BACKUP_MOUNTPOINT_NAME/last_backup.txt ]
        then
        LAST_REMOTE_BACKUP=$(cat "$BACKUP_MOUNTPOINT_NAME/last_backup.txt")
        echo "Last remote backup: $LAST_REMOTE_BACKUP"
    else
        echo "No remote backups detected."
    fi
}



_NzDoPhysicalBackup() { #Sync local backups to USB drive
    #Show prompt and detect newly plugged usb drive #TODO moe this to separate function
    echo "You have 60 seconds to insert your USB backup drive...."
    BACKUP_MOUNTPOINT_NAME=`inotifywait --quiet --timeout 60 /var/run/usbmount --format %w%f --event create`

    #If mountpoint is created by usbmount and is detected
    if [ -d "$BACKUP_MOUNTPOINT_NAME" ]
    then
        echo "Backup drive detected on $BACKUP_MOUNTPOINT_NAME"
        echo "Calculating disk space..."
        BACKUP_VOLUME_SIZE=`lsblk -b | grep "$BACKUP_MOUNTPOINT_NAME" |awk -F " " '{print $4}'` #Check backup drive capacity
        BACKUP_FILES_SIZE=`du -abc $BACKUP_LOCAL_STORAGE | tail -n 1 | awk -F " " '{print $1}'` #Check backup files size

        if [[ "$BACKUP_FILES_SIZE" -gt "$BACKUP_VOLUME_SIZE" ]]
        then
            #If drive is too small, throw an error.
            echo "Error: Backup drive is too small to contain your backup files\! Aborting."
        else
            #Check and display last backup dates
            _NzShowLastRemoteBackup
            _NzShowLastLocalBackup
            _NzShowLastLocalDbBackup
            _NzShowLastRemoteDbBackup
            echo "Starting backup synchronization to external drive"; sleep 2
            rsync -avzP $BACKUP_LOCAL_STORAGE $BACKUP_MOUNTPOINT_NAME/ &&  #Sync backups to usb drive with rsync #TODO do not use rsync, use backintimedirectly
            echo "Your backup has been copied to the external drive."
        fi
    else
        echo "No valid mountpoint found. You may want to format the backup drive." #If no mountpoint was detected, or detection times out, throw an error
    fi

}

####################################################################

_NzMenuBackup() {
    _NzCreateBackupDir
    _NzShowLastRemoteBackup

    selection=
    until [ "$selection" = "0" ]; do
         echo ""
         echo "========== BACKUP MENU =========="
         echo "WARNING: UNFINISHED SECTION"
         echo "1 - tree - generate a list of your important files"
         echo "2 - backup everything to local drive now"
         echo "3 - copy all local backups to external drive"
         echo "4 - backup MySQL databases to local drive"
         echo "5 - Display last MySQL backup date on external drive"
         echo "6 - Display last local MySQL backup date"
         echo "7 - Display last data backup date on external drive"
         echo ""
         echo "0 - Exit program"
         echo ""
         echo -n "Enter Selection:"
         read selection
         echo ""
         case $selection in
             1 ) _NzRunTree;;
             2 ) _NzBackupNow;;
             3 ) _NzDoPhysicalBackup;;
             4 ) _NzBackupSqldb;;
             5 ) _NzShowLastRemoteDbBackup;;
             6 ) _NzShowLastLocalDbBackup;;
             7 ) _NzShowLastRemoteBackup;;
             0 ) return 0;;
             * ) echo "Please enter a valid number"
         esac
    done
}